#Workflow name
name: Terraform Workflow - Init and Apply

#Triggers
#Push to initialise terraform and plan the changes
#Workflow dispatch to run the apply command and create the cluster
on:
  workflow_dispatch:
  push: 
    branches: 
      - main

#Give permission to read and write
permissions:
      id-token: write
      contents: read

#variables needed to access AWS cloud
env:
  TF_WORKSPACE: "AC41004-project"
  CONFIG_DIRECTORY: "./"


  #Keys kept secret in GitHub Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REGION: us-east-1

#Workflow's jobs
jobs:
  run_pipeline:
    runs-on: ubuntu-latest 
    steps:

      #Check out the code form the repository
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: PyYAML
      run: pip install PyYAML

      
      #Install terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1 
      
      #Appply changes to the .tf file
    - name: Import changes form config file
      run: python fileHandling.py
 

   
    # - name: Set up AWS credentials
    #   run: |
    #         export AWS_ACCESS_KEY_ID= ${{ secrets.AWS_ACCESS_KEY_ID }}
    #         export AWS_SECRET_ACCESS_KEY= ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      #Initialise terraform
    - name: Initialize Terraform
      run: terraform init -migrate-state

    - name: Reconfigure Terraform
      run: terraform init -reconfigure

      #Validate terraform
    - name: Validate Terraform
      run: terraform validate 

      #Run terraform plan pre-load the changes to apply
    - name: Plan Terraform
      run: terraform plan 
      #Applly changes to the terraform file and run the cluster
      #trigger the apply step only if the workflow dispatch button is pressed
    - name: Apply Terraform
      run: terraform apply --auto-approve
      if: github.event_name=='workflow_dispatch'
